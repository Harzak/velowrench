<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChainLengthCalculator" xml:space="preserve">
    <value>Chain Length Calculator</value>
  </data>
  <data name="GearCalculator" xml:space="preserve">
    <value>Gear Calculator</value>
  </data>
  <data name="SpokeLengthCalculator" xml:space="preserve">
    <value>Spoke Length Calculator</value>
  </data>
  <data name="SpokeTensionGuide" xml:space="preserve">
    <value>Spoke Tension Guide</value>
  </data>
  <data name="TransmissionAndDrivetrain" xml:space="preserve">
    <value>Transmission &amp; Drivetrain</value>
  </data>
  <data name="WheelsAndSpoking" xml:space="preserve">
    <value>Wheels &amp; Spoking</value>
  </data>
  <data name="CompatibilityAndStandards" xml:space="preserve">
    <value>Compatibility &amp; Standards</value>
  </data>
  <data name="ComponentCompatibilityGuide" xml:space="preserve">
    <value>Component Compatibility Guide</value>
  </data>
  <data name="AxleAndHubStandardChecker" xml:space="preserve">
    <value>Axle and Hub Standard Checker</value>
  </data>
  <data name="VeloWrench" xml:space="preserve">
    <value>veloWrench</value>
  </data>
  <data name="ChainLengthCalculatorHeader" xml:space="preserve">
    <value>Calculate the recommended bicycle chain length using your bike's chain stay length and gear sizes.</value>
  </data>
  <data name="ChainStayLength" xml:space="preserve">
    <value>Chain stay length</value>
  </data>
  <data name="LargestFrontChainring" xml:space="preserve">
    <value>Largest front chainring</value>
  </data>
  <data name="Teeth" xml:space="preserve">
    <value>Teeth</value>
  </data>
  <data name="LargestRearSprocket" xml:space="preserve">
    <value>Largest rear sprocket</value>
  </data>
  <data name="EnterValues" xml:space="preserve">
    <value>Please enter the values</value>
  </data>
  <data name="CalculationInProgress" xml:space="preserve">
    <value>Calculation in progress...</value>
  </data>
  <data name="Calculated" xml:space="preserve">
    <value>Calculated</value>
  </data>
  <data name="RecommendedValue" xml:space="preserve">
    <value>Recommended value</value>
  </data>
  <data name="ChainLength" xml:space="preserve">
    <value>Chain length</value>
  </data>
  <data name="ChainLinks" xml:space="preserve">
    <value>Chain links</value>
  </data>
  <data name="CalculationFailed" xml:space="preserve">
    <value>Calculation failed</value>
  </data>
  <data name="SomethingWentWrong" xml:space="preserve">
    <value>Something went wrong</value>
  </data>
  <data name="ChainLengthLabel" xml:space="preserve">
    <value>Chain length:</value>
  </data>
  <data name="ChainLinksLabel" xml:space="preserve">
    <value>Chain links:</value>
  </data>
  <data name="Inputs" xml:space="preserve">
    <value>Inputs</value>
  </data>
  <data name="HelpChainStayLengthHeader" xml:space="preserve">
    <value>Chain stay length (C)</value>
  </data>
  <data name="HelpChainStayLength" xml:space="preserve">
    <value>The distance between the center of the bottom bracket (pedal axle) and the center of the rear wheel axle. It is usually measured along the chain line.</value>
  </data>
  <data name="HelpFrontChainringHeader" xml:space="preserve">
    <value>Largest front chainring (F)</value>
  </data>
  <data name="HelpFrontChainring" xml:space="preserve">
    <value>The number of teeth on your bike's largest front chainring.</value>
  </data>
  <data name="HelpLargestRearSprocketHeader" xml:space="preserve">
    <value>Largest rear sprocket (R)</value>
  </data>
  <data name="HelpLargestRearSprocket" xml:space="preserve">
    <value>The number of teeth on the largest cog of your rear cassette/freewheel.</value>
  </data>
  <data name="Calculations" xml:space="preserve">
    <value>Calculations</value>
  </data>
  <data name="HelpChainLengthCalculationHeader" xml:space="preserve">
    <value>This tool uses two common methods to estimate the correct bicycle chain length:</value>
  </data>
  <data name="SimpleFormula" xml:space="preserve">
    <value>Simple formula</value>
  </data>
  <data name="SimpleFormulaExplanation" xml:space="preserve">
    <value>A quick approximation based on chainstay length and the sizes of your largest front chainring and largest rear sprocket. Best suited for standard bikes and quick calculations.</value>
  </data>
  <data name="RigorousFormula" xml:space="preserve">
    <value>Rigorous formula</value>
  </data>
  <data name="RigorousFormulaExplanation" xml:space="preserve">
    <value>A more accurate method that uses Pythagoras' theorem to take into account the actual path of the chain around the gears. This is more accurate for shorter chainstays or bikes with unusual gear sizes.</value>
  </data>
  <data name="Results" xml:space="preserve">
    <value>Results</value>
  </data>
  <data name="ResultChainLengthCalculExplaination" xml:space="preserve">
    <value>Both formulas give the recommended chain length, which can then be converted into the number of links required.</value>
  </data>
  <data name="OutputFormat" xml:space="preserve">
    <value>Output format</value>
  </data>
  <data name="GearCalculatorOutputFormatDescription" xml:space="preserve">
    <value>Represents the different ways of expressing the gear/transmission ratio.</value>
  </data>
  <data name="GearInches" xml:space="preserve">
    <value>Gear inches</value>
  </data>
  <data name="GearInchesDescription" xml:space="preserve">
    <value>Traditional gear inches calculation. Standard measurement for comparing gear ratios across different bicycle configurations.</value>
  </data>
  <data name="GainRatio" xml:space="preserve">
    <value>Gain ratio</value>
  </data>
  <data name="GainRatioDescription" xml:space="preserve">
    <value>Universal mechanical comparison between bikes. More mechanically accurate than gear inches.</value>
  </data>
  <data name="Development" xml:space="preserve">
    <value>Development</value>
  </data>
  <data name="DevelopmentDescription" xml:space="preserve">
    <value>Development calculation that measures the distance traveled per pedal revolution.</value>
  </data>
  <data name="Speed" xml:space="preserve">
    <value>Speed</value>
  </data>
  <data name="SpeedDescription" xml:space="preserve">
    <value>Calculates the speed achievable at a specific pedaling rate (RPM).</value>
  </data>
  <data name="FrontChainringTeethFormula" xml:space="preserve">
    <value>= number of teeth on the front chainring</value>
  </data>
  <data name="RearSprocketTeethFormula" xml:space="preserve">
    <value>= number of teeth on the rear sprocket</value>
  </data>
  <data name="WheelDiameterFormula" xml:space="preserve">
    <value>= wheel diameter in inches</value>
  </data>
  <data name="WheelRadiusFormula" xml:space="preserve">
    <value>= wheel radius</value>
  </data>
  <data name="CrankLengthFormula" xml:space="preserve">
    <value>= crank length</value>
  </data>
  <data name="WheelCircumferenceFormula" xml:space="preserve">
    <value>= wheel circumference</value>
  </data>
  <data name="CadenceRpmFormula" xml:space="preserve">
    <value>= cadence in revolutions per minute</value>
  </data>
  <data name="DevelopmentFormula" xml:space="preserve">
    <value>= development</value>
  </data>
  <data name="GearCalculatorResultsDescription" xml:space="preserve">
    <value>All results contain the values calculated for each combination of sprocket and chainring, sorted by chainring size and sprocket size.</value>
  </data>
  <data name="GearCalculatorUnitsDescription" xml:space="preserve">
    <value>The results of the development and speed calculations can be converted into different units, while the results of the gear inches calculation are only expressed in inches and those of the gain ratio are unitless.</value>
  </data>
  <data name="WheelSize" xml:space="preserve">
    <value>Wheel size</value>
  </data>
  <data name="CrankLength" xml:space="preserve">
    <value>Crank length</value>
  </data>
  <data name="Cadence" xml:space="preserve">
    <value>Cadence</value>
  </data>
  <data name="ChainringTeeth" xml:space="preserve">
    <value>Chainring(s) teeth</value>
  </data>
  <data name="SprocketTeeth" xml:space="preserve">
    <value>Sprocket(s) teeth</value>
  </data>
  <data name="GearCalculatorHeader" xml:space="preserve">
    <value>Visualize your gear setup with different metrics: gear inches, gain ratio, development, and speed.</value>
  </data>
</root>